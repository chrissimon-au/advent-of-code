import util.
import cp.
import testing.
import io.
import planner.

log() = false.

parse(Input) = (Towels,Targets) =>
    Lines := Input.split("\n"),
    Towels := map(strip,Lines[1].split(",")),
    Targets := Lines.slice(2),    
    if log()==true then
        println("===Input:"),
        println(Input),
        println("---Outcome:"),    
        println(Towels),
        println(Targets),
        println("===")
    end.

makeable_towel_displays(Input) = NumMakeableDisplays => 
    (Towels,Displays) = parse(Input),
    NumMakeableDisplays := 0,
    foreach (Display in Displays)        
        if towel_display_makeable(Display, Towels) then
            NumMakeableDisplays := NumMakeableDisplays + 1
        end
    end.

% uses the planner to find any plan with just `plan`
towel_display_makeable(Display,Towels) =>
    S0 = ("", Towels, Display, Display),
    plan(S0, _).

% uses the planner to find all plans with `best_plan_nondet`
print_all_ways_to_make_towel_display(Display,Towels) ?=>
    if towel_display_makeable(Display, Towels) then
        S0 := ("", Towels, Display, Display),
        All:=find_all(Plan,best_plan_nondet(S0, Plan)),
        println(All)
    else
        println("Not makeable")
    end.

% uses the planner to find all plans with `best_plan_nondet`
count_ways_to_make_towel_display(Display,Towels) = NumWaysToMakeDisplay => 
    if towel_display_makeable(Display, Towels) then
        S0 := ("", Towels, Display, Display),    
        NumWaysToMakeDisplay:=count_all(best_plan_nondet(S0, _))
    else
        NumWaysToMakeDisplay:=0
    end.

final((GoalDisplay, _, GoalDisplay, _)) => true.

action(S0, S1, Towel, Cost) => 
    (CurrentDisplay, Towels, GoalDisplay, RemainingDisplay) = S0,

    member(Towel, Towels),
    find(RemainingDisplay,Towel,1,TowelLen),

    NewDisplay = CurrentDisplay ++ Towel,
    RemainingDisplay := drop(RemainingDisplay,TowelLen),
    S1 = (NewDisplay, Towels, GoalDisplay, RemainingDisplay),
    Cost = 0. % Ensures all plans are considered equal and all are found.

count_ways_to_make_towel_displays(Input) = NumWaysToMakeDisplays =>
    (Towels,Displays) = parse(Input),
    NumWaysToMakeDisplays:=0,
    Idx:=0,
    Total:=Displays.len,
    foreach (Display in Displays)
        NumWaysToMakeDisplays := NumWaysToMakeDisplays + count_ways_to_make_towel_display(Display,Towels),
        Idx:=Idx+1,
        printf("%d of %d. Found %d ways.%n", Idx, Total, NumWaysToMakeDisplays)
    end.

print_all_ways_to_make_towel_displays(Input) = _ =>
    (Towels,Displays) = parse(Input),
    foreach (Display in Displays)
        printf("Target Display: %s%n", Display),
        print_all_ways_to_make_towel_display(Display,Towels)
    end.

all_tests = [

%     testing.assert_equal(        
%         "simple_case",
%         makeable_towel_displays("r

% r"), 1),

%     testing.assert_equal(
%         "two_patterns_two_combos_no_mixing",
%         makeable_towel_displays("r, wq

% r
% wq
% q"), 2),

%     testing.assert_equal(
%         "simple mixing of base towels",
%         makeable_towel_displays("r, wq

% r
% wq
% rwq
% q"), 3),

%     testing.assert_equal(
%         "more mixing of base towels",
%         makeable_towel_displays("r, wq

% r
% wq
% rwq
% q
% w"), 3),

%     testing.assert_equal(
%         "backwards mixing",
%         makeable_towel_displays("r, wq

% wqr
% q"), 1),

%     testing.assert_equal(
%         "multiple instances of a towel",
%         makeable_towel_displays("r, wq

% rr
% q"), 1),

%     testing.assert_equal(
%         "AoC Sample",
%         makeable_towel_displays(
%             read_file_chars("sampledata.txt")),
%             to_int(read_file_chars("sampledata.answer.txt"))),

%     testing.assert_equal(
%         "AoC Test",
%         makeable_towel_displays(
%             read_file_chars("testdata.txt")),
%             to_int(read_file_chars("testdata.answer.txt"))),

%     testing.assert_equal(
%         "Count of Ways to make towels - simple case",
%         count_ways_to_make_towel_displays("a, b, c, ab, bc

% abc
% cba
% "),
%             4),

%     testing.assert_equal(
%         "No solution when counting",
%         count_ways_to_make_towel_displays("x, y, z
        
%         abc
%         "),
%                     0),

    testing.assert_equal(
        "AoC Sample Part 2",
        count_ways_to_make_towel_displays(
            read_file_chars("sampledata.txt")),
            to_int(read_file_chars("sampledata.answer2.txt"))),

    testing.assert_equal(
        "AoC Test Part 2",
        count_ways_to_make_towel_displays(
            read_file_chars("testdata.txt")),
            to_int(read_file_chars("testdata.answer2.txt")))

].

main =>  
    Tests = all_tests(),
    testing.test_report(Tests)=Tests.length.
