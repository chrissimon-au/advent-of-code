import util.
import cp.
import testing.
import io.
import planner.

log() = false.

parse(Input) = (Towels,Targets) =>
    Lines := Input.split("\n"),
    Towels := map(strip,Lines[1].split(",")),
    Targets := Lines.slice(2),    
    if log()==true then
        println("===Input:"),
        println(Input),
        println("---Outcome:"),    
        println(Towels),
        println(Targets),
        println("===")
    end.

makeable_towel_displays(Input) = NumMakeableDisplays => 
    (Towels,Displays) = parse(Input),
    NumMakeableDisplays := 0,
    foreach (Display in Displays)        
        if towel_display_makeable(Display, Towels) then
            NumMakeableDisplays := NumMakeableDisplays + 1
        end
    end.

starts_with(Str,Prefix) =>
    Prefix = take(Str,len(Prefix)).

% uses the planner to find any plan
towel_display_makeable(Display,Towels) =>
    S0 := $towel_display("", Towels, Display, Display),
    plan(S0, _).

print_all_ways_to_make_towel_display(Display,Towels) = _ =>    
    S0 := $towel_display("", Towels, Display, Display),
    best_plan_nondet(S0, Plan),
    println(Plan).
    
count_ways_to_make_towel_display(Display,Towels) = NumWaysToMakeDisplay => 
    if towel_display_makeable(Display, Towels) then
        S0 := $towel_display("", Towels, Display, Display),    
        NumWaysToMakeDisplay:=count_all(best_plan_nondet(S0, _))
    else
        NumWaysToMakeDisplay:=0
    end.

final(S) =>
    $towel_display(CurrentDisplay, _, GoalDisplay, _) = S,
    CurrentDisplay == GoalDisplay.

action(S0, S1, Towel, Cost) => 
    $towel_display(CurrentDisplay, Towels, GoalDisplay, RemainingDisplay) = S0,
    member(Towel,Towels),    
    find(RemainingDisplay,Towel,1,TowelLen),

    NewDisplay = CurrentDisplay ++ Towel,
    RemainingDisplay := drop(RemainingDisplay,TowelLen),
    S1 = $towel_display(NewDisplay,Towels,GoalDisplay,RemainingDisplay),
    Cost=0.

count_ways_to_make_towel_displays(Input) = NumWaysToMakeDisplays =>
    (Towels,Displays) = parse(Input),
    NumWaysToMakeDisplays:=0,
    foreach (Display in Displays)
        NumWaysToMakeDisplays := NumWaysToMakeDisplays + count_ways_to_make_towel_display(Display,Towels)
    end.

all_tests = [

    testing.assert_equal(        
        "simple_case",
        makeable_towel_displays("r

r"), 1),

    testing.assert_equal(
        "two_patterns_two_combos_no_mixing",
        makeable_towel_displays("r, wq

r
wq
q"), 2),

    testing.assert_equal(
        "simple mixing of base towels",
        makeable_towel_displays("r, wq

r
wq
rwq
q"), 3),

    testing.assert_equal(
        "more mixing of base towels",
        makeable_towel_displays("r, wq

r
wq
rwq
q
w"), 3),

    testing.assert_equal(
        "backwards mixing",
        makeable_towel_displays("r, wq

wqr
q"), 1),

    testing.assert_equal(
        "multiple instances of a towel",
        makeable_towel_displays("r, wq

rr
q"), 1),

    testing.assert_equal(
        "AoC Sample",
        makeable_towel_displays(
            read_file_chars("sampledata.txt")),
            to_int(read_file_chars("sampledata.answer.txt"))),

    testing.assert_equal(
        "AoC Test",
        makeable_towel_displays(
            read_file_chars("testdata.txt")),
            to_int(read_file_chars("testdata.answer.txt"))),

    testing.assert_equal(
        "Count of Ways to make towels - simple case",
        count_ways_to_make_towel_displays("a, b, c, ab, bc

abc
cba
"),
            4),

    testing.assert_equal(
        "No solution when counting",
        count_ways_to_make_towel_displays("x, y, z
        
        abc
        "),
                    0)

    % testing.assert_equal(
    %     "AoC Sample Part 2",
    %     count_ways_to_make_towel_displays(
    %         read_file_chars("sampledata.txt")),
    %         to_int(read_file_chars("sampledata.answer2.txt")))

].

main =>  
    Tests = all_tests(),
    testing.test_report(Tests)=Tests.length.
