import util.
import cp.
import testing.
import io.

log() = false.

parse(Input) = (Towels,Targets) =>
    Lines := Input.split("\n"),
    Towels := map(strip,Lines[1].split(",")),
    Targets := Lines.slice(2),    
    if log()==true then
        println("===Input:"),
        println(Input),
        println("---Outcome:"),    
        println(Towels),
        println(Targets),
        println("===")
    end.

starts_with(Str,Prefix) =>
    Prefix = take(Str,len(Prefix)).

starts_with_any(Str, Lst, Matches) =>
    StartsWith=[ cond(starts_with(Str,Elem),Elem,"") : Elem in Lst],
    X=flatten(StartsWith),
    X!="",
    Matches=delete_all(StartsWith,"").

towel_display_makeable("",_) => 
    true.

towel_display_makeable(Display,Towels), starts_with_any(Display,Towels,Matches) =>
    NotMatching:=0,
    foreach (Match in Matches, break(towel_display_makeable(drop(Display,Match.len),Towels)))
        NotMatching := NotMatching+1
    end,
    NotMatching!=Matches.len.

makeable_towel_displays(Input) = NumMakeableDisplays => 
    (Towels,Displays) = parse(Input),
    NumMakeableDisplays := 0,
    NumDisplays := Displays.len,
    Idx := 0,
    foreach (Display in Displays)        
        if towel_display_makeable(Display, Towels) then
            NumMakeableDisplays := NumMakeableDisplays + 1
        end,
        Idx := Idx+1,
    end.

count_ways_to_make_towel_displays(Input) = NumWaysToMakeDisplays =>
    NumWaysToMakeDisplays=1.

all_tests = [

    testing.assert_equal(        
        "simple_case",
        makeable_towel_displays("r

r"), 1),

    testing.assert_equal(
        "two_patterns_two_combos_no_mixing",
        makeable_towel_displays("r, wq

r
wq
q"), 2),

    testing.assert_equal(
        "simple mixing of base towels",
        makeable_towel_displays("r, wq

r
wq
rwq
q"), 3),

    testing.assert_equal(
        "more mixing of base towels",
        makeable_towel_displays("r, wq

r
wq
rwq
q
w"), 3),

    testing.assert_equal(
        "backwards mixing",
        makeable_towel_displays("r, wq

wqr
q"), 1),

    testing.assert_equal(
        "multiple instances of a towel",
        makeable_towel_displays("r, wq

rr
q"), 1),

    testing.assert_equal(
        "AoC Sample",
        makeable_towel_displays(
            read_file_chars("sampledata.txt")),
            to_int(read_file_chars("sampledata.answer.txt"))),

    testing.assert_equal(
        "AoC Test",
        makeable_towel_displays(
            read_file_chars("testdata.txt")),
            to_int(read_file_chars("testdata.answer.txt"))),

    testing.assert_equal(
        "AoC Sample Part 2",
        count_ways_to_make_towel_displays(
            read_file_chars("sampledata.txt")),
            to_int(read_file_chars("sampledata.answer2.txt")))

].

main =>  
    Tests = all_tests(),
    testing.test_report(Tests)=Tests.length.
