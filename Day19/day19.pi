import util.
import cp.
import testing.

log() = false.

parse(Input) = (Towels,Targets) =>
    Lines := Input.split("\n"),
    Towels := map(strip,Lines[1].split(",")),
    Targets := Lines.slice(2),    
    if log()==true then
        println("===Input:"),
        println(Input),
        println("---Outcome:"),    
        println(Towels),
        println(Targets),
        println("===")
    end.
    

combinations(N,Xs) = combinations(N,Xs,len(Xs)).

combinations(0,_Xs,_Size) = [[]].
combinations(N,Xs,N) = [Xs].
combinations(N,[X|Xs],Size) = [[X|Comb] : Comb in combinations(N-1,Xs,Size-1)]
                                ++
                                combinations(N,Xs,Size-1).

towel_makeable(Target, Towels) => 
    BaseCombos := combinations(Towels.length,Towels) ++ combinations(Towels.length,reverse(Towels)),
    Combos = Towels ++ [X.join('') : X in BaseCombos],
    member(Target,Combos).


makeable_towels(Input) = NumTowels => 
    (Towels,Targets) = parse(Input),
    NumTowels := 0,
    foreach (Target in Targets)        
        if towel_makeable(Target, Towels) then
            NumTowels := NumTowels + 1
        end
    end.

all_tests = [

    testing.assert_equal(        
        "simple_case",
        makeable_towels("r

r"), 1),

    testing.assert_equal(
        "two_patterns_two_combos_no_mixing",
        makeable_towels("r, wq

r
wq
q"), 2),

    testing.assert_equal(
    "simple mixing of base towels",
    makeable_towels("r, wq

r
wq
rwq
q"), 3),

    testing.assert_equal(
    "more mixing of base towels",
    makeable_towels("r, wq

r
wq
rwq
q
w"), 3),

    testing.assert_equal(
    "backwards mixing",
    makeable_towels("r, wq

wqr
q"), 1),

    testing.assert_equal(
    "multiple instances",
    makeable_towels("r, wq

rr
q"), 1)

].

main =>  
    Tests = all_tests(),
    testing.test_report(Tests)=Tests.length.
