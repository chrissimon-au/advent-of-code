import util.
import cp.
import testing.

log() = false.

parse(Input) = (Towels,Targets) =>
    Lines := Input.split("\n"),
    Towels := map(strip,Lines[1].split(",")),
    Targets := Lines.slice(2),    
    if log()==true then
        println("===Input:"),
        println(Input),
        println("---Outcome:"),    
        println(Towels),
        println(Targets),
        println("===")
    end.

combinations(N,Xs) = combinations(N,Xs,len(Xs)).

take_(K,Lst) = take(Lst,K).

starts_with(Str,Prefix) =>
    Prefix = take(Str,len(Prefix)).

starts_with_any(Str, Lst, Match) =>
    Prefixes=[ cond(starts_with(Str,Elem),Elem,"") : Elem in Lst],
    Match=flatten(Prefixes),
    Match!="".


towel_makeable("",_) => true.
towel_makeable(Display,Towels), starts_with_any(Display,Towels,Match) =>
    towel_makeable(drop(Display,Match.len),Towels).


makeable_towels(Input) = NumTowels => 
    (Towels,Targets) = parse(Input),
    NumTowels := 0,
    foreach (Target in Targets)        
        if towel_makeable(Target, Towels) then
            NumTowels := NumTowels + 1
        end
    end.

all_tests = [

    testing.assert_equal(        
        "simple_case",
        makeable_towels("r

r"), 1),

    testing.assert_equal(
        "two_patterns_two_combos_no_mixing",
        makeable_towels("r, wq

r
wq
q"), 2),

    testing.assert_equal(
    "simple mixing of base towels",
    makeable_towels("r, wq

r
wq
rwq
q"), 3),

    testing.assert_equal(
    "more mixing of base towels",
    makeable_towels("r, wq

r
wq
rwq
q
w"), 3),

    testing.assert_equal(
    "backwards mixing",
    makeable_towels("r, wq

wqr
q"), 1),

    testing.assert_equal(
    "multiple instances of a towel",
    makeable_towels("r, wq

rr
q"), 1)

].

main =>  
    Tests = all_tests(),
    testing.test_report(Tests)=Tests.length.
