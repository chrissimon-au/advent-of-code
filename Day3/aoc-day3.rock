CheckIfNumber takes numAsString
    shatter numAsString into chars
    for char in chars
        cast char into charNum
        if charNum < 48 or charNum > 57 then
            give back 0
        end
    end
give back 1

GetArg takes argArray and position
    if position is 0 then
        brace is "("
        bracePos is 1
    else
        brace is ")"
        bracePos is 0
    end
    let arg be argArray at position
    split arg into argParts with brace
    let arg be argParts at bracePos
    let isNum be CheckifNumber taking arg
    if not isNum then
        arg is 0
    else
        cast arg with 10
    end
give back arg


MulArgs takes mulStr
    split mulStr into parts with "mul"
    let argString be parts at 1
    split argString into argStrings with ","
    let arg1 be GetArg taking argStrings, 0
    let arg2 be GetArg taking argStrings, 1    
    let args at 0 be arg1
    let args at 1 be arg2
give back args
 

if the world are mysterious
    say 0 
otherwise
    let mem be the world at 0
    let args be MulArgs taking mem
    let arg1 be args at 0
    let arg2 be args at 1
    print arg1 * arg2
yeah
